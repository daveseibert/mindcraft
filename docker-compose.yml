name: mind

include:
  - docker-compose-worlds.yaml
  - docker-compose-agents.yaml

services:
  tasks:
    build:
      context: tasks
    ports:
#      - "3000-3003:3000-3003" # see the view from the camera mounted on your bot head: http://localhost:3000/
      - "8000:8000"
    environment:
      LOGFIRE_TOKEN:
      MINECRAFT_HOST: "pi2.local"
      MINECRAFT_PORT: "25566"
      INSECURE_CODING: "true"
      MINDSERVER_HOST: bun
      MINDSERVER_PORT: 3030
      API_SERVER_HOST: bun
      API_SERVER_PORT: 80
    command: ["python", "tasks/tasks.py"]
    networks:
      - mind_network
#    depends_on:
#      fastapi:
#        condition: service_started
  evals:
    extends:
      service: tasks
    command: ["python", "tasks/evals.py", "--task_path", "tasks/tasks.json", "--insecure_coding", "--no_launch_world", "--num_agents", "1"]
  streamlit:
    extends:
      service: evals
    command: ["streamlit", "run", "app.py"]
    ports:
      - "8501:8501"
    develop:
      watch:
        - action: sync
          path: tasks/app.py
          target: /mindcraft/app.py

  react:
    build:
      context: react
    ports:
      - "3000:3000"
    environment:
      OPENAI_API_KEY:
    networks:
      - mind_network
    develop:
      watch:
        - action: sync
          path: react
          target: /app
  elysia:
    build:
      context: elysia
    ports:
      - "3002:80"
    environment:
      OPENAI_API_KEY:
    networks:
      - mind_network
    depends_on:
      - redis
    command: ["bun", "dev"]
    develop:
      watch:
        - action: sync
          path: elysia
          target: /app
  reagent:
    build:
      context: reagent
    ports:
      - "3004:80"
      - "4004:4000"
    networks:
      - mind_network
    command: ["bun", "run", "--watch", "--inspect=4000", "src/index.ts"]
    environment:
      MINECRAFT_HOST: pi2.local
      MINECRAFT_PORT: 25565
      MINECRAFT_VERSION: 1.20.4
#      MINECRAFT_USERNAME: hello_world
    develop:
      watch:
        - action: sync
          path: reagent
          target: /app
  bun:
    build:
      context: bun
    ports:
      - "3003:80"
      - "3030:3030"
    environment:
      OPENAI_API_KEY:
    networks:
      - mind_network
    depends_on:
      - redis
    command: ["bun", "run", "--watch", "src/index.ts", "--console"]
    develop:
      watch:
        - action: sync
          path: bun
          target: /app
  mindserver:
    build:
      context: mindserver
    ports:
      - "8080:8080"
    environment:
      MINDSERVER_PORT: 8080
#      OPENAI_API_KEY:
    networks:
      - mind_network
#    depends_on:
#      - redis
#    command: ["npm", "run", "dev"]
    develop:
      watch:
        - action: sync
          path: ./mindserver/src
          target: /app/src
          ignore:
            - node_modules/
        - action: sync
          path: ./mindserver/public
          target: /app/public
        - action: rebuild
          path: mindserver/package.json
  registry:
    image: registry:2.7
    ports:
      - "5000:5000"
    networks:
      - mind_network
  fastapi:
    build:
      context: fastapi
    ports:
      - "8008:80"
    environment:
      OPENAI_API_KEY:
      LOGFIRE_TOKEN:
    command: ["fastapi", "run", "main.py", "--port", "80", "--reload"]
    networks:
      - mind_network
    depends_on:
      redis:
        condition: service_started
    develop:
      watch:
        - action: sync
          path: fastapi/main.py
          target: /app/main.py
  redis:
    image: redis/redis-stack:latest  # This includes Redis + RedisSearch
    ports:
      - "6379:6379"
      - "8001:8001"  # RedisInsight web UI
    networks:
      - mind_network
    volumes:
      - redis_data:/data

volumes:
  redis_data:

networks:
  mind_network:
    driver: bridge
